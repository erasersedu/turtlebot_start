<?xml version="1.0" encoding="utf-8"?>
<launch>
  <!-- Turtlebot -->
  <arg name="base"              default="$(env TURTLEBOT_BASE)"         doc="mobile base type [create, roomba]"/>
  <arg name="battery"           default="$(env TURTLEBOT_BATTERY)"      doc="kernel provided locatio for battery info, use /proc/acpi/battery/BAT0 in 2.6 or earlier kernels." />
  <arg name="stacks"            default="$(env TURTLEBOT_STACKS)"       doc="stack type displayed in visualisation/simulation [circles, hexagons]"/>
  <arg name="3d_sensor"         default="$(env TURTLEBOT_3D_SENSOR)"    doc="3d sensor types [kinect, asux_xtion_pro]"/>
  <arg name="simulation"        default="$(env TURTLEBOT_SIMULATION)"   doc="set flags to indicate this turtle is run in simulation mode."/>
  <arg name="serialport"        default="$(env TURTLEBOT_SERIAL_PORT)"  doc="used by create to configure the port it is connected on [/dev/ttyUSB0, /dev/ttyS0]"/>

  <param name="/use_sim_time" value="$(arg simulation)"/>

  <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
    <arg name="base" value="$(arg base)" />
    <arg name="stacks" value="$(arg stacks)" />
    <arg name="3d_sensor" value="$(arg 3d_sensor)" />
  </include>
  
  <include file="$(find turtlebot_bringup)/launch/includes/mobile_base.launch.xml">
    <arg name="base" value="$(arg base)" />
    <arg name="serialport" value="$(arg serialport)" />
  </include>
  
  <include unless="$(eval arg('battery') == 'None')" file="$(find turtlebot_bringup)/launch/includes/netbook.launch.xml">
    <arg name="battery" value="$(arg battery)" />
  </include>

  <!-- Human follower -->
  <node name="urg_node" pkg="urg_node" type="urg_node" output="screen">
    <param name="serial_port" type="string" value="/dev/sensors/hokuyo_H1107995" />
    <param name="frame_id" type="string" value="laser" />
  </node>

  <node name="leg_finder" pkg="leg_finder" type="leg_finder_turtle" output="screen" args="--hyp">
    <param name="obst_xmin" value="0.0"/>
    <param name="obst_xmax" value="0.25"/>
    <param name="obst_ymin" value="-0.01"/>
    <param name="obst_ymax" value="0.01"/>
    <param name="obst_div" value="9"/>
  </node>
  
  <node name="human_follower" pkg="human_follower" type="human_follower_node" output="screen"/>

  <node name="laser_mannager" pkg="laser_manager" type="laser_manager_node" output="screen"/>

  <!-- XTion -->
  <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera"      default="camera"/>
  <arg name="publish_tf"  default="false"/>

  <!-- Factory-calibrated depth registration -->
  <arg name="depth_registration"              default="true"/>
  <arg     if="$(arg depth_registration)" name="depth" value="depth_registered" />
  <arg unless="$(arg depth_registration)" name="depth" value="depth" />

  <!-- Processing Modules -->
  <arg name="rgb_processing"                  default="true"/>
  <arg name="ir_processing"                   default="true"/>
  <arg name="depth_processing"                default="true"/>
  <arg name="depth_registered_processing"     default="true"/>
  <arg name="disparity_processing"            default="true"/>
  <arg name="disparity_registered_processing" default="true"/>
  <arg name="scan_processing"                 default="true"/>

  <!-- Worker threads for the nodelet manager -->
  <arg name="num_worker_threads" default="4" />

  <!-- Laserscan topic -->
  <arg name="scan_topic" default="scan"/>

  <include file="$(find turtlebot_bringup)/launch/includes/3dsensor/$(arg 3d_sensor).launch.xml">
    <arg name="camera"                          value="$(arg camera)"/>
    <arg name="publish_tf"                      value="$(arg publish_tf)"/>
    <arg name="depth_registration"              value="$(arg depth_registration)"/>
    <arg name="num_worker_threads"              value="$(arg num_worker_threads)" />

    <!-- Processing Modules -->
    <arg name="rgb_processing"                  value="$(arg rgb_processing)"/>
    <arg name="ir_processing"                   value="$(arg ir_processing)"/>
    <arg name="depth_processing"                value="$(arg depth_processing)"/>
    <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)"/>
    <arg name="disparity_processing"            value="$(arg disparity_processing)"/>
    <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)"/>
  </include>

  <!-- Navigation -->
  <!-- Map server -->
  <arg name="map_file" default="$(find turtlebot_start)/param/maps/AIBot.yaml"/>
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

  <!-- amcl -->
  <node name="loc_amcl" pkg="amcl" type="amcl" output="screen" args="scan_topic:=/scan_wrt_robot odom_frame_id:=/odom base_frame_id:=/base_footprint global_frame_id:=/map">
    <!--param name="odom_alpha1" value="0.001"/>
    <param name="odom_alpha2" value="0.001"/>
    <param name="odom_alpha3" value="0.001"/>
    <param name="odom_alpha4" value="0.001"/>
    <param name="odom_alpha5" value="0.001"/-->

    <!--param name="initial_pose_x" value="1.32"/>
    <param name="initial_pose_y" value="2.22"/>
    <param name="initial_pose_a" value="4.09"/-->

    <param name="update_min_a" value="0.1"/>
    <param name="laser_min_range" value="0.3"/>
    <param name="odom_model_type" value="diff"/>
  </node>

  <!-- Move base -->
  <arg name="custom_param_file" default="$(find turtlebot_start)/param/dummy.yaml"/>
  <include file="$(find turtlebot_start)/launch/includes/move_base.launch.xml">
    <arg name="custom_param_file" value="$(arg custom_param_file)"/>
  </include>

  <!-- rviz -->
  <node name="rviz" pkg="rviz" type="rviz"/>
  
</launch>
